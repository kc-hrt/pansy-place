{"version":3,"sources":["components/Navigation.js","components/Home.js","components/Login.js","components/Availability.js","components/AddPlant.js","components/Add2Crop.js","components/Admin.js","components/UpdateCrop.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","logOutUser","e","preventDefault","document","cookie","window","location","replace","console","log","AppBar","position","style","backgroundColor","Toolbar","Typography","variant","flexGrow","textDecoration","to","List","className","ListItem","onClick","this","Component","Home","App","state","username","password","handleTextChange","target","name","value","setState","login","Container","maxWidth","onSubmit","TextField","required","onChange","label","type","Button","color","Availability","props","user_name","availability","plants","heading","fetch","res","json","data","fixed","textAlign","fontSize","Table","TableHead","TableRow","TableCell","TableBody","map","plant","idx","key","plantsURL","AddPlant","handleSubmit","pushData","plant_name","addPlantName","plant_variant","addPlantVariant","plant_color","addPlantColor","axios","method","url","timeout","headers","then","setTimeout","crop","updatePlants","cropsURL","Add2Crop","handleChange","event","addPlantID","plant_id","available_quantity","updateCount","getData","id","MenuItem","Select","renderOptions","TabContainer","component","padding","children","ScrollableTabsButtonAuto","classes","root","Tabs","indicatorColor","textColor","scrollable","scrollButtons","Tab","React","withStyles","theme","width","palette","background","paper","UpdateCrop","putData","URL","match","params","ProtectedRoute","rest","render","cookies","parse","checkAuth","pathname","from","Router","exact","path","Login","Admin","Boolean","hostname","require","config","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d538540d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { AppBar, Toolbar, Typography, List, ListItem } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nexport default class Navigation extends Component {\n  logOutUser = (e) => {\n    e.preventDefault();\n    document.cookie = \"loggedIn=false;max-age=0*0\";\n    window.location.replace(\"/login\");\n    console.log(\"🚽\");\n  };\n\n  render() {\n    return (\n      <AppBar position=\"static\" style={{ backgroundColor: \"green\" }}>\n        <Toolbar>\n          <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n            <Link style={{ textDecoration: \"none\" }} to=\"/\">\n              Pansy Place\n            </Link>\n          </Typography>\n          <List className=\"nav\">\n            <ListItem className=\"nav-item\">\n              <Link style={{ textDecoration: \"none\" }} to=\"/Availability\">\n                Availability\n              </Link>\n            </ListItem>\n            <ListItem className=\"nav-item\">\n              {document.cookie === \"loggedIn=true\" ? (\n                <Link style={{ textDecoration: \"none\" }} to=\"/Admin\">\n                  Admin\n                </Link>\n              ) : null}\n            </ListItem>\n            <ListItem className=\"nav-item\">\n              {document.cookie === \"loggedIn=true\" ? (\n                <Link\n                  style={{ textDecoration: \"none\" }}\n                  to=\"/logout\"\n                  onClick={this.logOutUser}\n                >\n                  Logout\n                </Link>\n              ) : (\n                <Link style={{ textDecoration: \"none\" }} to=\"/login\">\n                  {\" \"}\n                  Login{\" \"}\n                </Link>\n              )}\n            </ListItem>\n          </List>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <div className=\"landing\">\n      <div className=\"masthead\">\n        <h2>Quality Above Quantity</h2>\n        <Link style={{ textDecoration: \"none\" }} to=\"/Availability\">\n          View Current Availability\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\n// import { Redirect } from \"react-router\";\nimport { TextField, Button, Container } from \"@material-ui/core\";\n\nclass App extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n  };\n\n  handleTextChange = (e) => {\n    const state = { ...this.state };\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  };\n\n  login = (e) => {\n    e.preventDefault();\n    // set cookie here\n    // set loggedIn = true and max-age = 60*1000 (one minute)\n    console.log(\"💾\", this.state.username);\n    document.cookie = \"loggedIn=true;max-age=60*1000\";\n\n    window.location.replace(\"/Availability\");\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container maxWidth=\"sm\">\n          <form className=\"login-form\" onSubmit={this.login}>\n            <TextField\n              required\n              onChange={this.handleTextChange}\n              value={this.state.username}\n              name=\"username\"\n              label=\"Username\"\n              type=\"text\"\n            />\n            <TextField\n              required\n              onChange={this.handleTextChange}\n              value={this.state.password}\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n            />\n            <Button\n              type=\"submit\"\n              className=\"login-button\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Login\n            </Button>\n          </form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  Container,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\n// import DeleteIcon from \"@material-ui/icons/Delete\";\nimport UpdateIcon from \"@material-ui/icons/Update\";\n\nconst availURL = \"http://localhost:42001/availability\";\n\nclass Availability extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user_name: \"\",\n      availability: [],\n      plants: [],\n      heading: \"Current Availability\",\n    };\n  }\n  async componentDidMount() {\n    console.log(\"mounted 🌵\", this.state.availability);\n    const res = await fetch(availURL);\n    const data = await res.json();\n    console.log(\"🌸🦋\", data);\n    this.setState({\n      availability: data,\n    });\n    console.log(\"🍄\", this.state);\n  }\n\n  componentDidUpdate() {\n    console.log(\"updated availability☀️\", this.state.availability);\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"lg\" fixed>\n        <h2 style={{ textAlign: \"center\", fontSize: \"50px\" }}>\n          {this.state.heading}\n        </h2>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Plant Name - Variant</TableCell>\n              <TableCell>Color</TableCell>\n              <TableCell># Available</TableCell>\n              {document.cookie === \"loggedIn=true\" ? (\n                <TableCell>Update</TableCell>\n              ) : null}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {this.state.availability.map((plant, idx) => (\n              <TableRow key={plant[\"crop_id\"]}>\n                <TableCell>\n                  {plant[\"plant_name\"]} - {plant[\"plant_variant\"]}\n                </TableCell>\n                <TableCell>{plant[\"plant_color\"]}</TableCell>\n                {document.cookie === \"loggedIn=true\" ? (\n                  <TableCell>{plant[\"available_quantity\"]}</TableCell>\n                ) : (\n                  <TableCell>{plant[\"available_quantity\"]}</TableCell>\n                )}\n                {document.cookie === \"loggedIn=true\" ? (\n                  <TableCell>\n                    <Link to={\"/UpdateCrop/\" + plant[\"crop_id\"]}>\n                      <UpdateIcon style={{ color: \"green\" }} />\n                    </Link>\n                  </TableCell>\n                ) : null}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Container>\n    );\n  }\n}\nexport default Availability;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport { Container, TextField, Button } from \"@material-ui/core\";\n// import DeleteIcon from \"@material-ui/icons/Delete\";\n// import UpdateIcon from \"@material-ui/icons/Update\";\n\nlet plantsURL = \"http://localhost:42001/plants\";\n\nclass AddPlant extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user_name: \"\",\n      crop: [],\n      plants: [],\n      updatePlants: \"\",\n      addPlantName: \"\",\n      addPlantVariant: \"\",\n      addPlantColor: \"\",\n      heading: \"Add Plants\",\n    };\n  }\n\n  handleTextChange = (e) => {\n    const state = { ...this.state };\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const pushData = {\n      plant_name: this.state.addPlantName,\n      plant_variant: this.state.addPlantVariant,\n      plant_color: this.state.addPlantColor,\n    };\n    console.log(\"🚀🦷\", pushData, plantsURL);\n\n    axios({\n      method: \"POST\",\n      url: plantsURL,\n      timeout: 9000,\n      data: pushData,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then(\n      setTimeout(() => {\n        console.log(\"🌍\");\n        // window.location.replace(\"/Admin\");\n      }, 800)\n    );\n  };\n\n  render() {\n    console.log(\"🌾\", this.state.plants);\n    return (\n      <Container maxWidth=\"lg\" fixed>\n        <h2 style={{ textAlign: \"center\", fontSize: \"50px\" }}>\n          {this.state.heading}\n        </h2>\n\n        <Container maxWidth=\"sm\">\n          <form className=\"login-form\" onSubmit={this.handleSubmit}>\n            <TextField\n              required\n              onChange={this.handleTextChange}\n              value={this.state.addPlantName}\n              name=\"addPlantName\"\n              label=\"Plant Name - Ex. Pansy\"\n              type=\"text\"\n            />\n            <TextField\n              required\n              onChange={this.handleTextChange}\n              value={this.state.addPlantVariant}\n              name=\"addPlantVariant\"\n              label=\"Plant Variety - Ex. Delta\"\n              type=\"text\"\n            />\n            <TextField\n              required\n              onChange={this.handleTextChange}\n              value={this.state.addPlantColor}\n              name=\"addPlantColor\"\n              label=\"Plant Color - Ex. Pure White\"\n              type=\"text\"\n            />\n            <Button\n              type=\"submit\"\n              className=\"submit-button\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Add Plant\n            </Button>\n          </form>\n        </Container>\n      </Container>\n    );\n  }\n}\nexport default AddPlant;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport {\n  Container,\n  TextField,\n  Button,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\n\n// import DeleteIcon from \"@material-ui/icons/Delete\";\n// import UpdateIcon from \"@material-ui/icons/Update\";\n\nconst cropsURL = \"http://localhost:42001/crops\";\nconst plantsURL = \"http://localhost:42001/plants\";\n\nclass Add2Crop extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user_name: \"\",\n      crop: [],\n      plants: [],\n      updatePlants: \"0\",\n      addPlantID: \"\",\n      heading: \"Add Plants to Crop List\",\n    };\n  }\n  async componentDidMount() {\n    console.log(\"🏹\", plantsURL);\n    // plantsURL = plantsURL + this.props.match.params.id;\n    // console.log(\"🪃\", this.props.match.params, plantsURL);\n    console.log(\"mounted 🌵\", this.state.plants);\n    const res = await fetch(plantsURL);\n    const getData = await res.json();\n    console.log(\"🌸🦋\", getData);\n    this.setState({\n      plants: getData,\n    });\n    console.log(\"🍄\", this.state);\n  }\n\n  handleChange = (event) => {\n    this.setState({ addPlantID: event.target.value });\n    console.log(\"🏂\", this.state.addPlantID);\n  };\n\n  handleTextChange = (e) => {\n    const state = { ...this.state };\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const pushData = {\n      plant_id: this.state.addPlantID,\n      available_quantity: this.state.updateCount,\n    };\n    console.log(\"🚀🦷\", pushData, cropsURL);\n\n    axios({\n      method: \"POST\",\n      url: cropsURL,\n      timeout: 9000,\n      data: pushData,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then(\n      setTimeout(() => {\n        console.log(\"🌍\");\n        // window.location.replace(\"/Admin\");\n      }, 1000)\n    );\n  };\n\n  renderOptions() {\n    return this.state.plants.map((plant, idx) => {\n      console.log(\"🍕🥗\", plant);\n      console.log(\"👃\", plant.id);\n      return (\n        <MenuItem\n          label=\"Select a Plant\"\n          value={plant.id}\n          key={idx}\n          name={plant.plant_name}\n        >\n          {plant.plant_name} {plant.plant_variant} - {plant.plant_color}\n        </MenuItem>\n      );\n    });\n  }\n\n  render() {\n    console.log(\"🌾\", this.state.plants);\n    return (\n      <Container maxWidth=\"lg\" fixed>\n        <h2 style={{ textAlign: \"center\", fontSize: \"50px\" }}>\n          {this.state.heading}\n        </h2>\n\n        <Container maxWidth=\"sm\">\n          <form className=\"login-form\" onSubmit={this.handleSubmit}>\n            <Select\n              className=\"width50\"\n              value={this.state.addPlantID}\n              onChange={this.handleChange}\n            >\n              {this.renderOptions()}\n            </Select>\n            <h3>Selected Plant {this.state.addPlantID}</h3>\n            <TextField\n              required\n              onChange={this.handleTextChange}\n              value={this.state.updateCount}\n              name=\"updateCount\"\n              label=\"0\"\n              type=\"text\"\n            />\n            <Button\n              type=\"submit\"\n              className=\"submit-button\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Add Plant\n            </Button>\n          </form>\n        </Container>\n      </Container>\n    );\n  }\n}\nexport default Add2Crop;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport AddPlant from \"./AddPlant\";\nimport Add2Crop from \"./Add2Crop\";\n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst styles = (theme) => ({\n  root: {\n    flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n});\n\nclass ScrollableTabsButtonAuto extends React.Component {\n  state = {\n    value: 0,\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"default\">\n          <Tabs\n            value={value}\n            onChange={this.handleChange}\n            indicatorColor=\"primary\"\n            textColor=\"primary\"\n            scrollable=\"true\"\n            scrollButtons=\"auto\"\n          >\n            <Tab label=\"Add Plant to Crop\" />\n            <Tab label=\"Add Plant\" />\n          </Tabs>\n        </AppBar>\n        {value === 0 && (\n          <TabContainer>\n            Add Plant to Crop\n            <Add2Crop />\n          </TabContainer>\n        )}\n        {value === 1 && (\n          <TabContainer>\n            Add Plant\n            <AddPlant />\n          </TabContainer>\n        )}\n      </div>\n    );\n  }\n}\n\nScrollableTabsButtonAuto.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ScrollableTabsButtonAuto);\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport { Container, TextField, Button } from \"@material-ui/core\";\n// import DeleteIcon from \"@material-ui/icons/Delete\";\n// import UpdateIcon from \"@material-ui/icons/Update\";\n\nlet cropsURL = \"http://localhost:42001/crops\";\n\nclass UpdateCrop extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user_name: \"\",\n      crop: [],\n      plants: [],\n      updateCount: \"\",\n      heading: \"Update Crop\",\n    };\n  }\n  async componentDidMount() {\n    console.log(\"🏹\", cropsURL);\n    cropsURL = cropsURL + this.props.match.params.id;\n    console.log(\"🪃\", this.props.match.params, cropsURL);\n    console.log(\"mounted 🌵\", this.state.crop);\n    const res = await fetch(cropsURL);\n    const data = await res.json();\n    console.log(\"🌸🦋\", data);\n    this.setState({\n      crop: data,\n    });\n    console.log(\"🍄\", this.state);\n  }\n  // DeleayComponent = () => {\n  //   const [show, setShow] = React.useState(false);\n  // };\n\n  componentDidUpdate() {\n    console.log(\"updated Crop ☀️\", this.state.crop);\n  }\n\n  handleTextChange = (e) => {\n    const state = { ...this.state };\n    state[e.target.name] = e.target.value;\n    this.setState(state);\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const putData = {\n      available_quantity: this.state.updateCount,\n    };\n    console.log(\"🚀🦷\", putData, URL);\n\n    axios({\n      method: \"PUT\",\n      url: URL,\n      timeout: 9000,\n      data: putData,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then(\n      setTimeout(() => {\n        console.log(\"World!\");\n        window.location.replace(\"/Availability\");\n      }, 1000)\n    );\n\n    // .then(window.location.replace(\"/Availability\"));\n\n    // window.location.replace(\"/Availability\");\n  };\n\n  render() {\n    const { id } = this.props.match.params;\n    console.log(\"🌾\", this.state.crop);\n    return (\n      <Container maxWidth=\"lg\" fixed>\n        <h2 style={{ textAlign: \"center\", fontSize: \"50px\" }}>\n          {this.state.heading} - {id}\n        </h2>\n        {this.state.crop.map((crop, idx) => (\n          <Container maxWidth=\"sm\" key={idx}>\n            <h4 style={{ textAlign: \"center\", fontSize: \"30px\" }}>\n              {crop[\"plant_name\"]} - {crop[\"plant_variant\"]}\n            </h4>\n            <h3 style={{ textAlign: \"center\", fontSize: \"40px\" }}>\n              {crop[\"plant_color\"]}\n            </h3>\n            <h5 style={{ textAlign: \"center\", fontSize: \"20px\" }}>\n              {crop[\"available_quantity\"]}\n            </h5>\n            <form className=\"login-form\" onSubmit={this.handleSubmit}>\n              <TextField\n                required\n                onChange={this.handleTextChange}\n                value={this.state.updateCount}\n                name=\"updateCount\"\n                label={crop[\"available_quantity\"]}\n                type=\"text\"\n              />\n              <Button\n                type=\"submit\"\n                className=\"submit-button\"\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                Update Availability\n              </Button>\n            </form>\n          </Container>\n        ))}\n      </Container>\n    );\n  }\n}\nexport default UpdateCrop;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport cookie from \"cookie\";\n\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Availability from \"./components/Availability\";\nimport Admin from \"./components/Admin\";\nimport UpdateCrop from \"./components/UpdateCrop\";\n\n// Write checkAuth function here\nconst checkAuth = () => {\n  const cookies = cookie.parse(document.cookie);\n  console.log(\"🍪\", cookies);\n  return cookies[\"loggedIn\"] ? true : false;\n};\n\n// Check the cookies for a cookie called \"loggedIn\"\n// Write ProtectedRoute function here\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n  console.log(\"💤\", rest);\n  return (\n    <Route\n      // spread the rest of the props that are needed in this component\n      {...rest}\n      // define the value of the render method as a ternaory that checks to see if checkAuth returns true or false\n      render={(props) =>\n        checkAuth() === true ? (\n          // if true render the component with all the props\n          <Component {...props} />\n        ) : (\n          // if false, use the Redirect component to update the url to `/login` so they are redirected to the login component\n          <Redirect\n            to={{ pathname: \"/login\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n};\n\nconst Router = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/Availability\" component={Availability} />\n      <Route exact path=\"/login\" component={Login} />\n      <ProtectedRoute path=\"/Admin\" component={Admin} />\n      <ProtectedRoute path=\"/UpdateCrop/:id\" component={UpdateCrop} />\n    </Switch>\n  );\n};\n\nexport default Router;\n","import React from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\nimport Router from \"./Router\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nfunction App() {\n  console.log(\"🌈\");\n  return (\n    <BrowserRouter>\n      <Navigation />\n      <Router />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}